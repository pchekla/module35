@model Module35.ViewModels.ChatViewModel
@using System.Security.Claims

@{
    ViewData["Title"] = $"Чат с {Model.Friend.GetFullName()}";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container chat-container">
    <div class="row">
        <div class="col-md-12">
            <div class="card chat-card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">
                            <a href="/AccountManager/User/@Model.FriendId" class="text-decoration-none text-dark">
                                <img src="@Model.Friend.Image" alt="@Model.Friend.GetFullName()" class="rounded-circle chat-avatar me-2" />
                                @Model.Friend.GetFullName()
                            </a>
                        </h4>
                        <span id="typing-indicator" class="text-muted" style="display: none;">печатает...</span>
                        <div>
                            <span id="message-count" class="badge bg-primary">@Model.Messages.Count сообщений</span>
                            <span id="last-update" class="text-muted small ms-2">Обновлено: <span id="updateTime">@DateTime.Now.ToString("HH:mm:ss")</span></span>
                        </div>
                    </div>
                </div>
                <div class="card-body messages-container" id="messagesContainer">
                    @await Html.PartialAsync("_ChatMessages", Model)
                </div>
                <div class="card-footer">
                    <form id="message-form" method="post" action="/Messages/SendMessage">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="friendId" name="friendId" value="@Model.FriendId" />
                        <div class="input-group">
                            <input type="text" id="messageText" name="Text" class="form-control" placeholder="Введите сообщение..." required autocomplete="off" />
                            <button type="submit" class="btn btn-primary">Отправить</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<audio id="message-sound" src="/sounds/message.mp3" preload="auto"></audio>

@section Scripts {
    <script src="~/js/chat.js"></script>
    <script>
        // Инициализация параметров чата
        const friendId = '@Model.FriendId';
        const currentUserId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)'; // Получаем ID текущего пользователя
        
        $(document).ready(function() {
            // Передаем оба ID в функцию инициализации
            initChat(friendId, currentUserId);
        });
    </script>
}

<style>
    .chat-container {
        max-width: 800px;
        margin: 20px auto;
    }
    
    .chat-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .chat-avatar {
        width: 40px;
        height: 40px;
        object-fit: cover;
    }
    
    .messages-container {
        height: 500px;
        overflow-y: auto;
        padding: 15px;
    }
    
    .message {
        margin-bottom: 10px;
        padding: 10px 15px;
        border-radius: 18px;
        max-width: 75%;
        position: relative;
    }
    
    .message-sent {
        background-color: #dcf8c6;
        border-top-right-radius: 5px;
        margin-left: auto;
    }
    
    .message-received {
        background-color: #f1f0f0;
        border-top-left-radius: 5px;
    }
    
    .message-time {
        font-size: 0.7rem;
        color: #888;
        margin-top: 2px;
        text-align: right;
    }
    
    .input-group .form-control {
        border-radius: 20px 0 0 20px;
    }
    
    .input-group .btn {
        border-radius: 0 20px 20px 0;
    }
    
    media (max-width: 576px) {
        .messages-container {
            height: 400px;
        }
        
        .message {
            max-width: 85%;
        }
    }
</style> 